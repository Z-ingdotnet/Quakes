Packages <- c(
 "shiny","shinydashboard","rgdal","maptools","ggplot2","ggthemes","rgeos"
)
#install.packages(Packages)
lapply(Packages, library, character.only = TRUE)


setwd("C:/Users/Zing/OneDrive/GitHub/R/Mapping_Quakes")

world <- readOGR("countries.geo.json", encoding="OGRGeoJSON", stringsAsFactors=FALSE)
plates <- readOGR("plates.json", encoding="OGRGeoJSON", stringsAsFactors=FALSE)
quakes <- readOGR("quakes2(2014-2016).json", encoding="OGRGeoJSON", stringsAsFactors=FALSE)



header <- dashboardHeader(title = "Basic Dashboard")  

sidebar <- dashboardSidebar(
  sidebarMenu(
    menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
    menuItem("Visit-us", icon = icon("barcode ",lib='glyphicon'), 
             href = "http://z-ing.net")
  )
)


frow1 <- fluidRow(
  valueBoxOutput("value1")
 # ,valueBoxOutput("value2")
  #,valueBoxOutput("value3")
)


frow2 <- fluidRow(
  
#  box(
#    title = "Test"
#    ,status = "primary"
#    ,solidHeader = TRUE 
#    ,collapsible = TRUE 
#    ,plotOutput("test", height = "1500px",width = 4)
#  )
  plotOutput("test",height = "1000px")
)
body <- dashboardBody(frow1, frow2
                      )

ui <- dashboardPage(title = 'This is my Page title', header, sidebar, body, skin='red')



# Define server logic to plot various variables against mpg ----
server <- function(input, output) {
  
# Data pre-processing ----

  world_map <- fortify(world)
  plates_map <- fortify(plates)
  quakes_dat <- data.frame(quakes)
  quakes_dat$trans <- quakes_dat$mag %% 5      #integer remainer
  
  

  
  # Return the formula text for printing as a caption ----
  output$caption <- renderText({
    formulaText()
  })
  
  
  
  output$test <- renderPlot({
    gg <- ggplot()
    gg <- gg + geom_map(data=world_map, map=world_map,
                        aes(x=long, y=lat, map_id=id),
                        color="white", size=0.15, fill="#d8d8d6")
    gg <- gg + geom_map(data=plates_map, map=plates_map,
                        aes(x=long, y=lat, map_id=id),
                        color="black", size=0.1, fill="#00000000", alpha=0)
    gg <- gg + geom_point(data=quakes_dat,
                          aes(x=coords.x1, y=coords.x2, size=trans),
                          shape=1, alpha=1/3, color="#d47e5d", fill="#00000000")
    gg <- gg + geom_point(data=subset(quakes_dat, mag>7.5),
                          aes(x=coords.x1, y=coords.x2, size=trans),
                          shape=1, alpha=1, color="black", fill="#00000000")
    gg <- gg + geom_text(data=subset(quakes_dat, mag>7.5),
                         aes(x=coords.x1, y=coords.x2, label=sprintf("Mag %2.1f", mag)),
                         color="black", size=3, vjust=c(5, 3.8, 3.7, 4.5 , 4, 3.9, 
                                                        5.2, 3.9,3.9, 4.4, 3.9, 3.9,
                                                        4, 4, 4.5), fontface="bold")
    gg <- gg + scale_size(name="Magnitude", trans="exp", labels=c(5:8), range=c(1, 30))
    gg <- gg + coord_map("mollweide")
    gg <- gg + theme_map()
    gg <- gg + theme(legend.position=c(0.05, 0.99))
    gg <- gg + theme(legend.direction="horizontal")
    gg <- gg + theme(legend.key=element_rect(color="#00000000"))
    gg
  })
}

shinyApp(ui, server)
